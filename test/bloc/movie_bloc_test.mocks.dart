// Mocks generated by Mockito 5.4.4 from annotations
// in omdb_movie_app/test/bloc/movie_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:omdb_movie_app/core/error/failures.dart' as _i6;
import 'package:omdb_movie_app/domain/entities/movie.dart' as _i7;
import 'package:omdb_movie_app/domain/entities/movie_details.dart' as _i9;
import 'package:omdb_movie_app/domain/repositories/movie_repository.dart'
    as _i2;
import 'package:omdb_movie_app/domain/usecases/add_favorite_movie.dart' as _i10;
import 'package:omdb_movie_app/domain/usecases/get_movie_details.dart' as _i8;
import 'package:omdb_movie_app/domain/usecases/remove_favorite_movie.dart'
    as _i11;
import 'package:omdb_movie_app/domain/usecases/search_movies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i4.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Movie>>> call(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [query],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Movie>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Movie>>(
          this,
          Invocation.method(
            #call,
            [query],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Movie>>>);
}

/// A class which mocks [GetMovieDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetails extends _i1.Mock implements _i8.GetMovieDetails {
  MockGetMovieDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.MovieDetails>> call(String? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [movieId],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i9.MovieDetails>>.value(
                _FakeEither_1<_i6.Failure, _i9.MovieDetails>(
          this,
          Invocation.method(
            #call,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.MovieDetails>>);
}

/// A class which mocks [AddFavoriteMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavoriteMovie extends _i1.Mock implements _i10.AddFavoriteMovie {
  MockAddFavoriteMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i9.MovieDetails? movieDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [movieDetails],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [movieDetails],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RemoveFavoriteMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFavoriteMovie extends _i1.Mock
    implements _i11.RemoveFavoriteMovie {
  MockRemoveFavoriteMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(String? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [movieId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
