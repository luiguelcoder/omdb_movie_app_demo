// Mocks generated by Mockito 5.4.4 from annotations
// in omdb_movie_app/test/repositories/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:omdb_movie_app/data/datasources/movie_local_data_source.dart'
    as _i6;
import 'package:omdb_movie_app/data/datasources/movie_remote_data_source.dart'
    as _i3;
import 'package:omdb_movie_app/data/models/movie_details_model.dart' as _i2;
import 'package:omdb_movie_app/data/models/movie_model.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetailsModel_0 extends _i1.SmartFake
    implements _i2.MovieDetailsModel {
  _FakeMovieDetailsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i3.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i4.Future<List<_i5.MovieModel>>.value(<_i5.MovieModel>[]),
      ) as _i4.Future<List<_i5.MovieModel>>);

  @override
  _i4.Future<_i2.MovieDetailsModel> fetchMovieDetails(String? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetails,
          [movieId],
        ),
        returnValue:
            _i4.Future<_i2.MovieDetailsModel>.value(_FakeMovieDetailsModel_0(
          this,
          Invocation.method(
            #fetchMovieDetails,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.MovieDetailsModel>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i6.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<String>> getFavoriteMovieIds() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteMovieIds,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<bool> addFavoriteMovie(_i2.MovieDetailsModel? moviedetailsModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavoriteMovie,
          [moviedetailsModel],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> removeFavoriteMovie(String? movieId) => (super.noSuchMethod(
        Invocation.method(
          #removeFavoriteMovie,
          [movieId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isFavoriteMovie(String? movieId) => (super.noSuchMethod(
        Invocation.method(
          #isFavoriteMovie,
          [movieId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
